#!/bin/bash
#
#
D_PATH="out_analysis"
REF_DIR=""
CURR_PATH="$(pwd)"
#
declare -a ANALYSIS=("tracespipelite" "spades" "metaspades" "metaviralspades" "coronaspades" "ssake" "tracespipe" "lazypipe" "pehaplo" "haploflow");
declare -a NO_ANALYSIS=("qvg" "qure" "vispa" "virgena" "v");
#
declare -a CLASSIFICATION=("tracespipelite" "tracespipe" "lazypipe");
declare -a NO_CLASSIFICATION=("spades" "metaspades" "metaviralspades" "coronaspades" "ssake" "pehaplo" "qvg" "qure" "vispa" "virgena" "haploflow" "v");
#
declare -a VIRUSES_AVAILABLE=("B19V" "BuV" "CuV" "HBoV" "AAV" "BKPyV" "JCPyV" "KIPyV"
                    "WUPyV" "MCPyV" "HPyV6" "HPyV7" "TSPyV" "HPyV9" "MWPyV"
                    "STLPyV" "HPyV12" "NJPyV" "LIPyV" "SV40" "TTV" "TTVmid"
                    "TTVmin" "HAV" "HBV" "HCV" "HDV" "HEV" "SENV" "HPV2"
                    "HPV6" "HPV11" "HPV16" "HPV18" "HPV31" "HPV39" "HPV45"
                    "HPV51" "HPV56" "HPV58" "HPV59" "HPV68" "HPV77" "HSV-1"
                    "HSV-2" "VZV" "EBV" "HCMV" "HHV6" "HHV7" "KSHV" "ReDoV"
                    "VARV" "MPXV" "EV" "SARS2" "HERV" "MT");
#
################################################################################
#
SHOW_MENU () {
  echo " ----------------------------------------------------------------------------  ";
  echo "                                                                               ";
  echo " Evaluation.sh : CoopPipe version v0.1                                         ";
  echo "                                                                               ";
  echo " WIP version of the evaluation script for CoopPipe. This file receives as      ";
  echo " input two directories, one generated by CoopPipe and generates statistics.    ";
  echo "                                                                               ";
  echo " Program options ------------------------------------------------------------- ";
  echo "                                                                               ";
  echo " -h, --help                                 Show this,                         ";
  echo "                                                                               ";
  echo " -r <STR>, --dir-reference <STR>            Directory containing the references";
  echo "                                            for the reconstruction,            ";
  echo "                                                                               ";
  echo " -o <STR>, --dir-reconstructed <STR>        Directory where the results of     ";
  echo "                                            the reconstruction are stored.     ";
  echo "                                                                               ";
  echo " In the reference directory the files must be named one of the following       ";
  echo " options - \"B19V\" \"BuV\" \"CuV\" \"HBoV\" \"AAV\" \"BKPyV\" \"JCPyV\" \"KIPyV\" \"WUPyV\" ";
  echo " \"MCPyV\" \"HPyV6\" \"HPyV7\" \"TSPyV\" \"HPyV9\" \"MWPyV\" \"STLPyV\" \"HPyV12\" \"NJPyV\" ";
  echo " \"LIPyV\" \"SV40\" \"TTV\" \"TTVmid\" \"TTVmin\" \"HAV\" \"HBV\" \"HCV\" \"HDV\" \"HEV\"    ";
  echo " \"SENV\" \"HPV2\" \"HPV6\" \"HPV11\" \"HPV16\" \"HPV18\" \"HPV31\" \"HPV39\" \"HPV45\"      "; 
  echo " \"HPV51\" \"HPV56\" \"HPV58\" \"HPV59\" \"HPV68\" \"HPV77\" \"HSV-1\" \"HSV-2\" \"VZV\"     ";
  echo " \"EBV\" \"HCMV\" \"HHV6\" \"HHV7\" \"KSHV\" \"ReDoV\" \"VARV\" \"MPXV\" \"EV\" \"SARS2\"    ";
  echo " \"HERV\" \"MT\"                                                               ";
  echo "                                                                               ";
  echo " Example --------------------------------------------------------------------- ";
  echo "                                                                               ";
  echo " ./Evaluation.sh -r reference -o out_analysis                                  ";
  echo "                                                                               ";
  echo " ----------------------------------------------------------------------------- ";
  }
#
################################################################################
#
if [[ "$#" -lt 1 ]];
  then
  HELP=1;
  fi
#
POSITIONAL=();
#
while [[ $# -gt 0 ]]
  do
  i="$1";
  case $i in
    -h|--help|?)
      HELP=1;
      shift
    ;;
    -r|--ref|--dir-reference)
      REF_DIR="$2";
      shift 2;
    ;;
    -o|--out|--dir-reconstructed)
      D_PATH="$2";
      shift 2;
    ;;
    -*) # unknown option with small
    echo "Invalid arg ($1)!";
    echo "For help, try: ./Evaluation.sh -h"
    exit 1;
    ;;
  esac
  done
#
set -- "${POSITIONAL[@]}" # restore positional parameters
#
################################################################################
#
if [[ "$HELP" -eq "1" ]];
  then
  SHOW_MENU;
  exit;
  fi
#
################################################################################
#
if [[ -d "$REF_DIR" ]] && [[ -d "$D_PATH" ]];
  then
  rm -rf Results
  mkdir Results
  #cd Results
  
  CONSENSUS="$(pwd)/$D_PATH/consensus"

  echo "File	Time(s)	SNPs	AvgIdentity	NCD	NRC	Mem(GB)	%CPU	Nr contigs	Metagenomic_analysis	Metagenomic_classification	Coverage	SNP_mutations_DS	Contamination_ds" > Results/total_stats.tsv
#
  for REF_FILE in `ls $(pwd)/$REF_DIR/*.fa` #for each fasta file in curr dir
    do 
  
  for file in `ls $CONSENSUS/*-*-consensus.fa*` #for each fasta file in curr dir
  do 
    tmp_nvr="$(echo $REF_FILE | awk -F/ '{print $NF}')"
    name_vir_ref="$(cut -d'.' -f1 <<< $tmp_nvr)"
    
    tmp_nvrecon="$(echo $file | awk -F/ '{print $NF}')"
    name_vir_recon="$(cut -d'-' -f 2 <<< $tmp_nvrecon)" #this won't work for v-pipe
    
    
    #printf " REF --> $name_vir_ref      FILE --> $name_vir_recon \n\n" 
    if [[ "$name_vir_ref" == "$name_vir_recon" ]];
      then
      printf " REF --> $REF_FILE      FILE --> $file \n\n" 
     
      rm -rf out.report	 
      TIME=-1
      SNPS=-1
      IDEN=1
    NCD=1
    NRC=1
    MEM=-1
    CPU_P=-1
    NR_SPECIES=-1
    DOES_ANALYSIS=-1
    DOES_CLASSIFICATION=-1
  
    fst_char=$(cat $file | head -c 1)
    if [[ -z "$fst_char" ]]; then
      printf "The result file is empty."    
    else
      dos2unix $file  
      gawk -i inplace '{ while(sub(/QuRe./,int(rand()*99999999999)+1)); print }' $file
      gawk -i inplace '{ while(sub(/results/,int(rand()*99999999999)+1)); print }' $file

      dnadiff $file $REF_FILE; #run dnadiff
      
      IDEN=`cat out.report | grep "AvgIdentity " | head -n 1 | awk '{ print $2;}'`;  #retrieve results
      ALBA=`cat out.report | grep "AlignedBases " | head -n 1 | awk '{ print $2;}'`;
      SNPS=`cat out.report | grep TotalSNPs | awk '{ print $2;}'`;
      TBASES=`cat out.report | grep "TotalBases" | awk '{ print $2;}'`;
      AUX="$(cut -d')' -f1 <<< "$ALBA")"
      PERALBA="$(cut -d'(' -f2 <<< "$AUX")"
      TALBA="$(cut -d'(' -f1 <<< "$ALBA")" 
         
      NRBASES=`cat out.report | grep "TotalBases" | awk '{ print $2;}'`;  
          
      tmp_f="$(echo $file | awk -F/ '{print $NF}')"
    file_wout_extension="$(cut -d'-' -f 1 <<< $tmp_f)"
    #file_wout_extension="$(cut -d'-' -f -1 <<< $file_wout_extension)" #check if this work with v-pipe

      printf "file wout -> $file_wout_extension\n\n"
      
      if [ "$file_wout_extension" == "v" ];
        then
        file_wout_extension="v-pipe"
      fi
      
      printf "TIME -> $D_PATH/$file_wout_extension-time.txt \n\n"
      
      TIME=`cat $D_PATH/$file_wout_extension-time.txt | grep "TIME" | awk '{ print $2;}'`;
      MEM=`cat $D_PATH/$file_wout_extension-time.txt | grep "MEM" | awk '{ print $2;}'`;
      CPU_P=`cat $D_PATH/$file_wout_extension-time.txt | grep "CPU_perc" | awk '{ print $2;}'`;
      #TMP=$(($TALBA * 100))
      #ACCURACY=$(echo $TMP \/ $TBASES |bc -l | xargs printf %.3f)
      
      NAME_TOOL="$(cut -d'-' -f1 <<< $D_PATH/$file_wout_extension)"
      
      DOES_ANALYSIS="?"
      DOES_CLASSIFICATION="?"      

      for i in "${ANALYSIS[@]}" #check if the tool does metagenomic analysis
      do
        if [ "$i" == "$NAME_TOOL" ] ; then
          DOES_ANALYSIS="Yes"
          break
        fi 
      done
      
      if [ "$DOES_ANALYSIS" == "?" ] ; then
        for i in "${NO_ANALYSIS[@]}"
        do
          if [ "$i" == "$NAME_TOOL" ] ; then
            DOES_ANALYSIS="No"
            break
          fi 
        done
      fi
      
      for i in "${CLASSIFICATION[@]}" #check if the tool does metagenomic classification
      do
        if [ "$i" == "$NAME_TOOL" ] ; then
          DOES_CLASSIFICATION="Yes"
          break
        fi
      done
      
      if [ "$DOES_CLASSIFICATION" == "?" ] ; then
        for i in "${NO_CLASSIFICATION[@]}"
        do
          if [ "$i" == "$NAME_TOOL" ] ; then
            DOES_CLASSIFICATION="No"
            break
          fi 
        done
      fi
      
      
      
      NR_SPECIES=$(grep '>' $file -c)
      gto_fasta_rand_extra_chars < $file > tmp.fa
      gto_fasta_to_seq < tmp.fa > $file.seq
      gto_fasta_to_seq < $REF_FILE > $REF_FILE.seq
      
      #Compressing sequences C(X) or C(X,Y)
      GeCo3 -tm 1:1:0:1:0.9/0:0:0 -tm 7:10:0:1:0/0:0:0 -tm 16:100:1:10:0/3:10:0.9 -lr 0.03 -hs 64 $file.seq 
      COMPRESSED_SIZE_WOUT_REF=$(ls -l $file.seq.co | cut -d' ' -f5)
      rm $file.seq.co
      
      #Conditional compression C(X|Y) [use reference and target]

      GeCo3 -rm 20:500:1:12:0.9/3:100:0.9 -rm 13:200:1:1:0.9/0:0:0 -tm 1:1:0:1:0.9/0:0:0 -tm 7:10:0:1:0/0:0:0 -tm 16:100:1:10:0/3:10:0.9 -lr 0.03 -hs 64 -r $file.seq $REF_FILE.seq
      COMPRESSED_SIZE_COND_COMPRESSION=$(ls -l $REF_FILE.seq.co | cut -d' ' -f5)   
      rm $REF_FILE.seq.co
      
      #Relative compression (only reference models) C(X||Y)
      GeCo3 -rm 20:500:1:12:0.9/3:100:0.9 -rm 13:200:1:1:0.9/0:0:0 -lr 0.03 -hs 64 -r $file.seq $REF_FILE.seq
      COMPRESSED_SIZE_W_REF=$(ls -l $REF_FILE.seq.co | cut -d' ' -f5)      
      rm $REF_FILE.seq.co            
      FILE_SIZE=$(ls -l $file | cut -d' ' -f5)
     
      rm $file.seq
      
      NCD=$(echo $COMPRESSED_SIZE_COND_COMPRESSION \/ $COMPRESSED_SIZE_WOUT_REF |bc -l | xargs printf %.3f)
       
      AUX_MULT=$(echo "$FILE_SIZE * 2" | bc -l )
      NRC=$(echo $COMPRESSED_SIZE_W_REF \/ $AUX_MULT|bc -l | xargs printf %.3f)      
      
      IDEN=$(echo $IDEN |bc -l | xargs printf %.3f)
      MEM=$(echo $MEM \/ 1048576 |bc -l | xargs printf %.3f)
      
    #file	exec_time	snps	avg_identity	NCD	NRC	max_mem	cpu_avg	nr_contigs_reconstructed	metagenomic_analysis	metagenomic_classification	coverage	snp_dataset
    echo "$file	$TIME	$SNPS	$IDEN	$NCD	$NRC	$MEM	$CPU_P	$NR_SPECIES	$DOES_ANALYSIS	$DOES_CLASSIFICATION	$coverage	$snp_ds	$cnt_ds" >> Results/total_stats.tsv   
    fi 
     
     
     
     
     
    fi    
    done
    
  done
  
else 
  printf "ERR \n\n"

fi 

